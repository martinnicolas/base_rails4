c
promedio
c
MedidorEstadoMedidor.where(estado_medidor_id: self.id).map(&:estado_medidor_id)
c
estados.count + 1
self.estado_actual
estados
periodo
c
periodo
estado_medidor_id
c
estado_medidor_id
c
estados
c
estados
c
estados
promedio
c
estados
promedio
c
estados
estados = EstadoMedidor.where("fecha_medicion <= ?",DateTime.now)
c
ruta.first.fecha_medicion
ruta.first
ruta
c
ruta.take.fecha_medicion.month
ruta.take.fecha_medicion.year
ruta.take.fecha_medicion
ruta.take
c
ruta[:estado_medidors][:fecha_medicion]
ruta['fecha_medicion']
ruta[:fecha_medicion]
ruta
c
ruta
c
ruta
c
ruta
c
ruta
c
ruta
c
self
c
self
@estado_medidor
c
@estado_medidor
estado_medidor_params
c
@estado_medidor
c
@estado_medidor
c
@estado_medidor
estado_medidor_params
c
aux / estados.count
c
aux / estados.count
axu / estados.count
aux
estado
estado.consumo
estados.count
estados
aux
c
@anio
@mes
c
Usuario.joins(:rutum, :categorium, :medidors).where(ruta: {id: ruta_id}).merge(Medidor.joins(:estado_medidors).where("month(estado_medidors.fecha_medicion) = ?",params[:mes]).where("year(estado_medidors.fecha_medicion) = ?",params[:anio]))
   41:           where("month(estado_medidors.fecha_medicion) = ?",params[:mes]).
   40:           Medidor.joins(:estado_medidors).
Usuario.joins(:rutum, :categorium, :medidors).where(ruta: {id: ruta_id}).merge(
ruta
c
params
c
params
c
@estado_medidor
c
params
c
params
c
@novedad
c
params
c
@novedad
c
params
c
params
c
@novedad
c
params
c
params
c
@novedad
c
params
c
params
c
estado_medidor
c
estado_medidor
c
params
c
params
c
EstadoMedidor.where(id: estado_ids).destroy_all
estado_ids
c
@medidor.medidor_estado_medidors
@medidor.estado_medidors
@medidor.estado_medidors.destroy_all
@medidor.estado_medidors.destroy_all!
medidor.estado_medidors.destroy_all!
c
@medidor.medidor_estado_medidors.destroy_all
@medidor.medidor_estado_medidor.destroy_all
@medidor.estado_medidors
@medidor.estado_medidors.destroy_all
@medidor.estado_medidors
c
medidores.to_json
medidores
c
medidores
c
medidores
c
medidores
c
medidores
c
medidores
c
medidores
medidores.to_json
c
medidores.to_json
c
medidores.to_json
c
medidores.to_jsonc
medidores.to_json
medidores
c
Medidor.select("medidors.id, tipo_medidors.nombre").joins(usuario_medidors: {usuario_id: params[:usuario_id]})
Medidor.selec("medidors.id, tipo_medidors.nombre").joins(usuario_medidors: {usuario_id: params[:usuario_id]})
       tipo_medidors.nombre as tipo_medidor"
       medidors.modelo as modelo,
       medidors.marca as marca,
       medidors.numero as numero,
      "medidors.id as id,
Medidor.select(
medidores
c
medidores
c
medidores
c
medidores
c
medidores
c
medidores
c
medidores
c
medidores
c
medidores
c
params
c
params[:medidor_id]
params
c
Medidor.find_by(params[:medidor_id]).id
c
Medidor.find_by(params[:medidor_id])
params
c
params
c
json: {ruta: ruta.to_json }
json: ruta: {ruta.to_json}
json
ruta.to_json
ruta
user
user.id
ruta
c
current_user
c
current_user
c
session
c
session
c
sign_in user, store: false
user && Devise.secure_compare(user.authentication_token, 'P1LWHJuY53UNNskZ98G9')
if user && Devise.secure_compare(user.authentication_token, 'P1LWHJuY53UNNskZ98G9')
user
user = true && User.find_by_email(user_email)
user
user_email && User.find_by_email(user_email)
user_email = 'tomaestado@tomaestado.com'
user_email = 
params[:nombre] = 'tomaestado@tomaestado.com'
user_email
c
warden.user
session
session[:init] = true
session[:init]
session[:init
session
c
session[:current_user]
warden.user
session.current_use
session[:init] = true
session.load
session
@current_user
c
session
warden.user
c
warden.user
session
c
current_user
c
